(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameStartJs = require("./states/GameStart.js");

var _statesGameStartJs2 = _interopRequireDefault(_statesGameStartJs);

var _statesLevelSelectJs = require("./states/LevelSelect.js");

var _statesLevelSelectJs2 = _interopRequireDefault(_statesLevelSelectJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesLevelUpJs = require("./states/LevelUp.js");

var _statesLevelUpJs2 = _interopRequireDefault(_statesLevelUpJs);

var _statesLevelFailedJs = require("./states/LevelFailed.js");

var _statesLevelFailedJs2 = _interopRequireDefault(_statesLevelFailedJs);

var _statesFinishedJs = require("./states/Finished.js");

var _statesFinishedJs2 = _interopRequireDefault(_statesFinishedJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('gameStart', _statesGameStartJs2["default"]);
  game.state.add('levelSelect', _statesLevelSelectJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('levelUp', _statesLevelUpJs2["default"]);
  game.state.add('levelFailed', _statesLevelFailedJs2["default"]);
  game.state.add('finished', _statesFinishedJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs0QkFFaUIsa0JBQWtCOzs7OytCQUNmLHFCQUFxQjs7OztpQ0FDbkIsdUJBQXVCOzs7O21DQUNyQix5QkFBeUI7Ozs7NEJBQ2hDLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7bUNBQ2pCLHlCQUF5Qjs7OztnQ0FDNUIsc0JBQXNCOzs7O0FBVDNDLElBQUksSUFBSSxDQUFDOztBQVdULE1BQU0sQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUMxQixNQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUywrQkFBVSxDQUFDO0FBQ25DLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsaUNBQVksQ0FBQztBQUN2QyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLG1DQUFjLENBQUM7QUFDM0MsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLG1DQUFjLENBQUM7QUFDM0MsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxnQ0FBVyxDQUFDO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBRTFCLENBQUMiLCJmaWxlIjoiRDovTmFzdHlhL1JvbGxpbmdTY29wZVNjb29sL0dpcmxzLWdhbWUtdGVhbS9HaXJscy1nYW1lLXRlYW0vc3JjL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lO1xyXG5cclxuaW1wb3J0IEJvb3QgZnJvbSBcIi4vc3RhdGVzL0Jvb3QuanNcIjtcclxuaW1wb3J0IFByZWxvYWQgZnJvbSBcIi4vc3RhdGVzL1ByZWxvYWQuanNcIjtcclxuaW1wb3J0IEdhbWVTdGFydCBmcm9tIFwiLi9zdGF0ZXMvR2FtZVN0YXJ0LmpzXCI7XHJcbmltcG9ydCBMZXZlbFNlbGVjdCBmcm9tIFwiLi9zdGF0ZXMvTGV2ZWxTZWxlY3QuanNcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcclxuaW1wb3J0IExldmVsVXAgZnJvbSBcIi4vc3RhdGVzL0xldmVsVXAuanNcIjtcclxuaW1wb3J0IExldmVsRmFpbGVkIGZyb20gXCIuL3N0YXRlcy9MZXZlbEZhaWxlZC5qc1wiO1xyXG5pbXBvcnQgRmluaXNoZWQgZnJvbSBcIi4vc3RhdGVzL0ZpbmlzaGVkLmpzXCI7XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoODAwLCA2MDAsIFBoYXNlci5BVVRPLCAnZ2FtZScpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdib290JywgQm9vdCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3ByZWxvYWQnLCBQcmVsb2FkKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZVN0YXJ0JywgR2FtZVN0YXJ0KTtcclxuICBnYW1lLnN0YXRlLmFkZCgnbGV2ZWxTZWxlY3QnLCBMZXZlbFNlbGVjdCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWUnLCBHYW1lKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnbGV2ZWxVcCcsIExldmVsVXApO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdsZXZlbEZhaWxlZCcsIExldmVsRmFpbGVkKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZmluaXNoZWQnLCBGaW5pc2hlZCk7XHJcbiAgZ2FtZS5zdGF0ZS5zdGFydCgnYm9vdCcpO1xyXG5cclxufTtcclxuIl19
},{"./states/Boot.js":2,"./states/Finished.js":3,"./states/Game.js":4,"./states/GameStart.js":5,"./states/LevelFailed.js":6,"./states/LevelSelect.js":7,"./states/LevelUp.js":8,"./states/Preload.js":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
    function Boot() {
        _classCallCheck(this, Boot);
    }

    _createClass(Boot, [{
        key: 'preload',
        value: function preload() {
            this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
            this.load.spritesheet('loader', 'assets/images/loader.png', 200, 204, 12);
            this.game.load.json('levels', 'assets/levels.json');
            this.game.stage.backgroundColor = 'fff';
        }
    }, {
        key: 'create',
        value: function create() {
            this.game.state.start('preload');

            this.game.toggleSound = function () {

                if (!this.musicToggleBtn.frame) this.musicToggleBtn.frame = 1;else this.musicToggleBtn.frame = 0;

                if (!this.game.bgMusic.mute) this.game.bgMusic.mute = true;else this.game.bgMusic.mute = false;
            };

            this.game.createToggleMusicBtn = function (state) {
                state.musicToggleBtn = state.add.button(800 - 80, 0, 'musicBtn', state.game.toggleSound, state);
                if (!state.game.bgMusic.mute) state.musicToggleBtn.frame = 0;else state.musicToggleBtn.frame = 1;
                state.musicToggleBtn.fixedToCamera = true;
            };
        }
    }]);

    return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvQm9vdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLElBQUk7YUFBSixJQUFJOzhCQUFKLElBQUk7OztpQkFBSixJQUFJOztlQUVkLG1CQUFHO0FBQ04sZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0FBQzlELGdCQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxRSxnQkFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1NBQzNDOzs7ZUFFSyxrQkFBRztBQUNMLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRWpDLGdCQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZOztBQUVoQyxvQkFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUMxQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FFOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDOztBQUVsQyxvQkFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUU5QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQ3RDLENBQUE7O0FBRUQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDOUMscUJBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hHLG9CQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUN4QixLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FFL0IsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLHFCQUFLLENBQUMsY0FBYyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDN0MsQ0FBQTtTQUNKOzs7V0FqQ2dCLElBQUk7OztxQkFBSixJQUFJIiwiZmlsZSI6IkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xuXG4gICAgcHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdsb2FkaW5nX2JnJywgJ2Fzc2V0cy9pbWFnZXMvbG9hZGluZ19iZy5qcGcnKTtcbiAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkZXIucG5nJywgMjAwLCAyMDQsIDEyKTtcbiAgICAgICAgdGhpcy5nYW1lLmxvYWQuanNvbignbGV2ZWxzJywgJ2Fzc2V0cy9sZXZlbHMuanNvbicpO1xuICAgICAgICB0aGlzLmdhbWUuc3RhZ2UuYmFja2dyb3VuZENvbG9yID0gJ2ZmZic7XG4gICAgfVxuXG4gICAgY3JlYXRlKCkge1xuICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcblxuICAgICAgICB0aGlzLmdhbWUudG9nZ2xlU291bmQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5tdXNpY1RvZ2dsZUJ0bi5mcmFtZSlcbiAgICAgICAgICAgICAgICB0aGlzLm11c2ljVG9nZ2xlQnRuLmZyYW1lID0gMTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLm11c2ljVG9nZ2xlQnRuLmZyYW1lID0gMDtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmdhbWUuYmdNdXNpYy5tdXRlKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5iZ011c2ljLm11dGUgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5iZ011c2ljLm11dGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2FtZS5jcmVhdGVUb2dnbGVNdXNpY0J0biA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgc3RhdGUubXVzaWNUb2dnbGVCdG4gPSBzdGF0ZS5hZGQuYnV0dG9uKDgwMCAtIDgwLCAwLCAnbXVzaWNCdG4nLCBzdGF0ZS5nYW1lLnRvZ2dsZVNvdW5kLCBzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmdhbWUuYmdNdXNpYy5tdXRlKVxuICAgICAgICAgICAgICAgIHN0YXRlLm11c2ljVG9nZ2xlQnRuLmZyYW1lID0gMDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzdGF0ZS5tdXNpY1RvZ2dsZUJ0bi5mcmFtZSA9IDE7XG4gICAgICAgICAgICBzdGF0ZS5tdXNpY1RvZ2dsZUJ0bi5maXhlZFRvQ2FtZXJhID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Finished = (function () {
    function Finished() {
        _classCallCheck(this, Finished);
    }

    _createClass(Finished, [{
        key: 'create',
        value: function create() {
            var GAME_SETTINGS = this.game.levelsJSON.gameSettings;

            this.game.bgMusic.pause();
            this.levelFailedSound = this.game.add.audio('finished');
            this.levelFailedSound.play();

            this.window = this.game.add.group();
            var windowBg = this.window.create(0, 0, "finishedWindowBg");
            var selectLevelBtn = this.createButton(this.window, 'windowBtn', this.onSelectLevelClick);
            var selectLevelText = this.game.add.bitmapText(0, 0, 'segoes', "Menu", 24);
            selectLevelText.x = (selectLevelBtn.width - selectLevelText.width) / 2;
            selectLevelText.y = (selectLevelBtn.height - selectLevelText.height - 6) / 2;
            selectLevelBtn.addChild(selectLevelText);
            selectLevelBtn.x = GAME_SETTINGS.canvasWidth / 2 - selectLevelBtn.width / 2;
        }
    }, {
        key: 'createButton',
        value: function createButton(parent, asset, callback) {
            var btn = this.game.make.button(0, 500, asset, callback, this, 1, 0, 2);
            parent.add(btn);
            btn.onInputOver.add(this.over, this);
            btn.onInputOut.add(this.out, this);
            return btn;
        }
    }, {
        key: 'onSelectLevelClick',
        value: function onSelectLevelClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('levelSelect');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'over',
        value: function over() {
            document.querySelector("canvas").style.cursor = 'none';
            this.pointer = this.add.sprite(this.input.x - 25, this.input.y - 32, "pointer");
            this.input.addMoveCallback(function (pointer, x, y) {
                this.pointer.x = x - 25;
                this.pointer.y = y - 32;
            }, this);
        }
    }, {
        key: 'out',
        value: function out() {
            document.querySelector("canvas").style.cursor = 'default';
            this.input.deleteMoveCallback();
            this.pointer.destroy();
        }
    }]);

    return Finished;
})();

exports['default'] = Finished;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvRmluaXNoZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixRQUFRO2FBQVIsUUFBUTs4QkFBUixRQUFROzs7aUJBQVIsUUFBUTs7ZUFFbkIsa0JBQUc7QUFDTCxnQkFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDOztBQUV4RCxnQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUIsZ0JBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEQsZ0JBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFN0IsZ0JBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEMsZ0JBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUM1RCxnQkFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMxRixnQkFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMzRSwyQkFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQztBQUN2RSwyQkFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUM7QUFDN0UsMEJBQWMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekMsMEJBQWMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDL0U7OztlQUVXLHNCQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO0FBQ2xDLGdCQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLGtCQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLGVBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckMsZUFBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuQyxtQkFBTyxHQUFHLENBQUM7U0FDZDs7O2VBRWlCLDhCQUFHO0FBQ2pCLGdCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsc0JBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixnQkFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEMsb0JBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7U0FDN0Q7OztlQUVHLGdCQUFHO0FBQ0gsb0JBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkQsZ0JBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRixnQkFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsVUFBVSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNoRCxvQkFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixvQkFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUMzQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ1o7OztlQUVFLGVBQUc7QUFDRixvQkFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUMxRCxnQkFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ2hDLGdCQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFCOzs7V0EvQ2dCLFFBQVE7OztxQkFBUixRQUFRIiwiZmlsZSI6IkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvRmluaXNoZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaW5pc2hlZCB7XG5cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIGNvbnN0IEdBTUVfU0VUVElOR1MgPSB0aGlzLmdhbWUubGV2ZWxzSlNPTi5nYW1lU2V0dGluZ3M7XG5cbiAgICAgICAgdGhpcy5nYW1lLmJnTXVzaWMucGF1c2UoKTtcbiAgICAgICAgdGhpcy5sZXZlbEZhaWxlZFNvdW5kID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnZmluaXNoZWQnKTtcbiAgICAgICAgdGhpcy5sZXZlbEZhaWxlZFNvdW5kLnBsYXkoKTtcblxuICAgICAgICB0aGlzLndpbmRvdyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgbGV0IHdpbmRvd0JnID0gdGhpcy53aW5kb3cuY3JlYXRlKDAsIDAsIFwiZmluaXNoZWRXaW5kb3dCZ1wiKTtcbiAgICAgICAgbGV0IHNlbGVjdExldmVsQnRuID0gdGhpcy5jcmVhdGVCdXR0b24odGhpcy53aW5kb3csICd3aW5kb3dCdG4nLCB0aGlzLm9uU2VsZWN0TGV2ZWxDbGljayk7XG4gICAgICAgIGxldCBzZWxlY3RMZXZlbFRleHQgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoMCwgMCwgJ3NlZ29lcycsIFwiTWVudVwiLCAyNCk7XG4gICAgICAgIHNlbGVjdExldmVsVGV4dC54ID0gKHNlbGVjdExldmVsQnRuLndpZHRoIC0gc2VsZWN0TGV2ZWxUZXh0LndpZHRoKSAvIDI7XG4gICAgICAgIHNlbGVjdExldmVsVGV4dC55ID0gKHNlbGVjdExldmVsQnRuLmhlaWdodCAtIHNlbGVjdExldmVsVGV4dC5oZWlnaHQgLSA2KSAvIDI7XG4gICAgICAgIHNlbGVjdExldmVsQnRuLmFkZENoaWxkKHNlbGVjdExldmVsVGV4dCk7XG4gICAgICAgIHNlbGVjdExldmVsQnRuLnggPSBHQU1FX1NFVFRJTkdTLmNhbnZhc1dpZHRoIC8gMiAtIHNlbGVjdExldmVsQnRuLndpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBjcmVhdGVCdXR0b24ocGFyZW50LCBhc3NldCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGJ0biA9IHRoaXMuZ2FtZS5tYWtlLmJ1dHRvbigwLCA1MDAsIGFzc2V0LCBjYWxsYmFjaywgdGhpcywgMSwgMCwgMik7XG4gICAgICAgIHBhcmVudC5hZGQoYnRuKTtcbiAgICAgICAgYnRuLm9uSW5wdXRPdmVyLmFkZCh0aGlzLm92ZXIsIHRoaXMpO1xuICAgICAgICBidG4ub25JbnB1dE91dC5hZGQodGhpcy5vdXQsIHRoaXMpO1xuICAgICAgICByZXR1cm4gYnRuO1xuICAgIH1cblxuICAgIG9uU2VsZWN0TGV2ZWxDbGljaygpIHtcbiAgICAgICAgbGV0IGNsaWNrU291bmQgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdjbGljaycpO1xuICAgICAgICBjbGlja1NvdW5kLnBsYXkoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5zdGFydCgnbGV2ZWxTZWxlY3QnKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKS5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7XG4gICAgfVxuXG4gICAgb3ZlcigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKS5zdHlsZS5jdXJzb3IgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMucG9pbnRlciA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmlucHV0LnggLSAyNSwgdGhpcy5pbnB1dC55IC0gMzIsIFwicG9pbnRlclwiKTtcbiAgICAgICAgdGhpcy5pbnB1dC5hZGRNb3ZlQ2FsbGJhY2soZnVuY3Rpb24gKHBvaW50ZXIsIHgsIHkpIHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlci54ID0geCAtIDI1O1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyLnkgPSB5IC0gMzI7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIG91dCgpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKS5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7XG4gICAgICAgIHRoaXMuaW5wdXQuZGVsZXRlTW92ZUNhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMucG9pbnRlci5kZXN0cm95KCk7XG4gICAgfVxufVxuIl19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = (function (_Phaser$State) {
    _inherits(Game, _Phaser$State);

    function Game() {
        _classCallCheck(this, Game);

        _get(Object.getPrototypeOf(Game.prototype), 'constructor', this).call(this);
        this._levelNumber = 0;
    }

    _createClass(Game, [{
        key: 'create',
        value: function create() {
            this.FLOOR_HEIGHT = 30;
            this.gameSettings = this.game.levelsJSON.gameSettings;
            this.levelsSettings = this.game.levelsJSON.levels;
            this.ballSettings = this.game.levelsJSON.ballSettings;

            this.pulling = false;
            this.launched = false;
            this.bullets = 0;
            this.knockedDownAims = 0;
            this.aimsCount = 0;
            this.slingshotPlayingSound = false;
            this.ballOnFloor = false;
            this.ballTouchesWall = false;

            if (!this.game.bgMusic.isPlaying) this.game.bgMusic.play();

            this.initPhysicWorld();

            this.game.add.image(0, 0, this.levelsSettings[this._levelNumber].locationBg);

            this.createSlingshot();
            this.createLevel();
            this.createGameInterface();

            this.resetBoard();

            this.game.physics.p2.updateBoundsCollisionGroup();

            this.game.physics.p2.setImpactEvents(true);
        }
    }, {
        key: 'initPhysicWorld',
        value: function initPhysicWorld() {
            this.game.world.resize(this.gameSettings.worldWidth, this.gameSettings.worldHeight + this.FLOOR_HEIGHT);
            this.game.world.setBounds(0, 0, this.gameSettings.worldWidth, this.gameSettings.worldHeight);
            this.game.physics.startSystem(Phaser.Physics.P2JS);
            this.game.physics.p2.gravity.y = this.gameSettings.gravity;
            this.ropeCollisionGroup = this.game.physics.p2.createCollisionGroup();
            this.ballCollisionGroup = this.game.physics.p2.createCollisionGroup();
            this.aimsCollisionGroup = this.game.physics.p2.createCollisionGroup();
            this.blocksCollisionGroup = this.game.physics.p2.createCollisionGroup();
        }
    }, {
        key: 'createGameInterface',
        value: function createGameInterface() {
            this.createScoreView();
            this.createMenuBtn();
            this.game.createToggleMusicBtn(this);
        }
    }, {
        key: 'createScoreView',
        value: function createScoreView() {
            var bg = this.game.add.sprite(0, 0, 'scoreBg');
            bg.fixedToCamera = true;
            this.txtScore = this.game.add.bitmapText(45, 30, 'segoes', "ATTEMPTS:", 20);
            this.txtScore.fixedToCamera = true;
        }
    }, {
        key: 'createMenuBtn',
        value: function createMenuBtn() {
            var menuBtn = this.game.add.button(this.gameSettings.canvasWidth - 160, 0, "menuBtn", this.onMenuClick, this, 1, 0, 2);
            menuBtn.fixedToCamera = true;
        }
    }, {
        key: 'onMenuClick',
        value: function onMenuClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('levelSelect');
        }
    }, {
        key: 'playerWins',
        value: function playerWins() {
            this.game.PLAYER_DATA[this._levelNumber] = this.bullets;

            // unlock next level
            if (this._levelNumber < this.game.PLAYER_DATA.length) {
                if (this.game.PLAYER_DATA[this._levelNumber + 1] < 0) {
                    this.game.PLAYER_DATA[this._levelNumber + 1] = 0;
                }
            }
            // and write to local storage
            window.localStorage.setItem('mygame_progress', JSON.stringify(this.game.PLAYER_DATA));

            if (this._levelNumber == this.levelsSettings.length - 1) {
                this.state.start('finished');
            } else this.state.start('levelUp');
        }
    }, {
        key: 'createSlingshot',
        value: function createSlingshot() {
            this.stripes = this.add.graphics(0, 0);
            var handlePart = this.add.sprite(182, 480, 'slingshotHandleRightPart');
            this.createBall();
            var handle = this.add.sprite(160, 480, 'slingshotHandle');
        }
    }, {
        key: 'createBall',
        value: function createBall() {
            this.ball = this.add.sprite(this.ballSettings.startPos.x, this.ballSettings.startPos.y, 'ball');
            this.physics.p2.enable(this.ball, false);
            this.ball.body.setCircle(this.ballSettings.radius, 0, 0);
            this.ball.inputEnabled = true;
            this.ball.body.mass = this.ballSettings.mass;

            this.ball.body.setCollisionGroup(this.ballCollisionGroup);
            this.ball.body.collides([this.ropeCollisionGroup]);
            this.ball.body.collides(this.aimsCollisionGroup, this.hitAim, this);
            this.ball.body.collides([this.blocksCollisionGroup], this.boxHit, this);
        }
    }, {
        key: 'startPull',
        value: function startPull() {
            this.pulling = true;
            this.ballOnFloor = false;
            this.ballTouchesWall = false;
            this.game.input.onUp.addOnce(this.endPull, this);
            this.game.camera.follow(this.ball);

            this.slingshotSound = this.game.add.audio('slingshotSound');
            this.slingshotSound.volume = 0.1;
            this.slingshotSound.play();
        }
    }, {
        key: 'endPull',
        value: function endPull() {
            this.pulling = false;
            this.launched = true;

            var forceLine = new Phaser.Line(this.input.activePointer.x, this.input.activePointer.y, this.ballSettings.startPos.x, this.ballSettings.startPos.y);
            this.ball.body.motionState = Phaser.Physics.P2.Body.DYNAMIC;
            this.ball.body.velocity.x = Math.cos(forceLine.angle) * forceLine.length * 6;
            this.ball.body.velocity.y = Math.sin(forceLine.angle) * forceLine.length * 6;
            this.stripes.clear();
            this.bullets--;
            this.pullSpound = this.game.add.audio('pullSound');
            this.pullSpound.volume = 0.3;
            this.pullSpound.play();
        }
    }, {
        key: 'resetBoard',
        value: function resetBoard() {
            this.launched = false;
            this.resetBall();
            this.txtScore.setText("ATTEMPTS: " + this.bullets);
        }
    }, {
        key: 'resetBall',
        value: function resetBall() {
            this.checkLevelResult();
            this.slingshotPlayingSound = false;

            this.ball.body.reset();
            this.ball.body.rotation = 0;
            this.ball.body.motionState = Phaser.Physics.P2.Body.STATIC;
            this.ball.events.onInputDown.addOnce(this.startPull, this);
            this.ball.body.x = this.ballSettings.startPos.x;
            this.ball.body.y = this.ballSettings.startPos.y;
        }
    }, {
        key: 'levelFailed',
        value: function levelFailed() {
            this.state.start('levelFailed');
        }
    }, {
        key: 'createLevel',
        value: function createLevel() {
            this.bullets = +this.levelsSettings[this._levelNumber].bullets;
            this.boxGroup = this.game.add.group();
            this.aimsGroup = this.game.add.group();

            for (var i = 0, _length = this.levelsSettings[this._levelNumber].things.length; i < _length; i++) {
                var thing = this.levelsSettings[this._levelNumber].things[i];
                switch (thing.type) {
                    case 'box':
                        {
                            this.createBox(thing.startPos, thing.width, thing.height, thing.asset, thing.mass);
                            break;
                        }
                    case 'aim':
                        {
                            this.createAim(thing.startPos, thing.width, thing.height, thing.asset, thing.scorePoints, thing.mass);
                            break;
                        }
                }
            }

            this.game.camera.focusOnXY(this.boxGroup.x, this.boxGroup.y);

            setTimeout(function (currentState) {
                currentState.game.add.tween(currentState.game.camera).to({ x: 0 }, 2000, Phaser.Easing.Linear.None, true);
            }, 3000, this);
        }
    }, {
        key: 'createAim',
        value: function createAim(startPos, width, height, id, scorePoints, mass) {
            var aim = this.aimsGroup.create(startPos.x, startPos.y, id);
            aim.id = id;
            aim.alpha = 0;
            var tween = this.game.add.tween(aim).to({ alpha: 1 }, 2000, Phaser.Easing.Linear.None, true);
            aim.scale.setTo(width / aim.width, height / aim.height);
            this.physics.enable(aim, Phaser.Physics.P2JS, false);
            aim.body.clearShapes();
            aim.body.loadPolygon('physics', id);
            aim.body.setCollisionGroup(this.aimsCollisionGroup);
            aim.body.collideWorldBounds = true;
            aim.body.collides([this.blocksCollisionGroup, this.ballCollisionGroup, this.aimsCollisionGroup]);
            aim.body.mass = mass;
            aim.body.scorePoints = scorePoints;
            this.aimsCount += 1;
        }
    }, {
        key: 'createBox',
        value: function createBox(startPos, width, height, id, mass) {
            var box = this.createBlock(startPos, id, width, height);
            box.body.setCollisionGroup(this.blocksCollisionGroup);
            box.body.collides([this.blocksCollisionGroup, this.ballCollisionGroup, this.aimsCollisionGroup]);
            box.body.mass = mass;
        }
    }, {
        key: 'createBlock',
        value: function createBlock(startPos, id, width, height) {
            var block = this.boxGroup.create(startPos.x, startPos.y, id);
            block.scale.setTo(width / block.width, height / block.height);
            this.physics.p2.enable(block, false);
            return block;
        }
    }, {
        key: 'checkLevelResult',
        value: function checkLevelResult() {
            if (this.knockedDownAims == this.aimsCount) {
                this.playerWins();
            } else if (this.bullets < 1) {
                this.levelFailed();
            }
        }
    }, {
        key: 'update',
        value: function update() {
            if (this.pulling) {
                this.ball.body.x = this.input.activePointer.x;
                this.ball.body.y = this.input.activePointer.y;
                this.stripes.clear();
                this.stripes.lineStyle(5, 0xffc850, 1);
                this.stripes.moveTo(this.ball.body.x - 5, this.ball.body.y - 5);
                this.stripes.lineTo(this.ballSettings.startPos.x - 10, this.ballSettings.startPos.y - 10);
                this.stripes.moveTo(this.ball.body.x + 5, this.ball.body.y + 5);
                this.stripes.lineTo(200, 487);
            }
            if (this.launched) {
                this.ball.body.force.y = 70;
                this.ball.body.force.x = 70;

                if (Math.round(Math.abs(this.ball.body.velocity.y)) < 1 && Math.round(Math.abs(this.ball.body.velocity.x)) < 1) this.resetBoard();
            }
            if (!this.ballTouchesWall && this.gameSettings.worldWidth - Math.round(this.ball.x) == this.ballSettings.radius) {
                this.ballTouchesWall = true;
                this.boxHit();
            }
            if (!this.ballOnFloor && this.gameSettings.worldHeight - Math.round(this.ball.y) == this.ballSettings.radius) {
                this.ballOnFloor = true;
                this.boxHit();
            }
        }
    }, {
        key: 'hitAim',
        value: function hitAim(body1, body2) {
            if (body2.sprite.alive) {
                body2.sprite.kill();
                if (body2.sprite.id == "milkBottle") {
                    this.bottleSound = this.game.add.audio('bottleSound');
                    this.bottleSound.play();
                } else {
                    this.scoreSound = this.game.add.audio('scoreSound');
                    this.scoreSound.play();
                }
                this.knockedDownAims++;
            }
        }
    }, {
        key: 'boxHit',
        value: function boxHit() {
            this.boxSound = this.game.add.audio('boxSound');
            this.boxSound.volume = 0.3;
            this.boxSound.play();
        }
    }, {
        key: 'render',
        value: function render() {}
    }]);

    return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStart = (function () {
    function GameStart() {
        _classCallCheck(this, GameStart);
    }

    _createClass(GameStart, [{
        key: "create",
        value: function create() {

            this.game.bgMusic.play();
            this.game.bgMusic.loop = true;

            this.add.sprite(0, 0, "startGameBg");
            this.game.createToggleMusicBtn(this);

            this.playBtn = this.add.button(this.game.width / 2, this.game.height * 7 / 8, 'startGamePlayBtn', this.onPlayBtnClick, this, 1, 0, 2);
            this.playBtn.anchor.setTo(0.5, 0.5);
            this.playBtn.onInputOver.add(this.over, this);
            this.playBtn.onInputOut.add(this.out, this);
        }
    }, {
        key: "over",
        value: function over() {
            document.querySelector("canvas").style.cursor = 'none';
            this.pointer = this.add.sprite(this.input.x - 25, this.input.y - 32, "pointer");
            this.input.addMoveCallback(function (pointer, x, y) {
                this.pointer.x = x - 25;
                this.pointer.y = y - 32;
            }, this);
        }
    }, {
        key: "out",
        value: function out() {
            document.querySelector("canvas").style.cursor = 'default';
            this.input.deleteMoveCallback();
            this.pointer.destroy();
        }
    }, {
        key: "onPlayBtnClick",
        value: function onPlayBtnClick() {
            this.clickSound = this.game.add.audio('click');
            this.clickSound.play();
            this.game.state.start('levelSelect');
            document.body.style.cursor = 'default';
        }
    }]);

    return GameStart;
})();

exports["default"] = GameStart;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvR2FtZVN0YXJ0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUIsU0FBUztBQUVmLGFBRk0sU0FBUyxHQUVaOzhCQUZHLFNBQVM7S0FHekI7O2lCQUhnQixTQUFTOztlQUtwQixrQkFBRzs7QUFFTCxnQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDekIsZ0JBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRTlCLGdCQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3JDLGdCQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVyQyxnQkFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RJLGdCQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLGdCQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDL0M7OztlQUVHLGdCQUFHO0FBQ0gsb0JBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkQsZ0JBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRixnQkFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsVUFBVSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNoRCxvQkFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixvQkFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUMzQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ1o7OztlQUVFLGVBQUc7QUFDRixvQkFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUMxRCxnQkFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ2hDLGdCQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFCOzs7ZUFFYSwwQkFBRztBQUNiLGdCQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQyxnQkFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN2QixnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3JDLG9CQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQzFDOzs7V0F2Q2dCLFNBQVM7OztxQkFBVCxTQUFTIiwiZmlsZSI6IkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvR2FtZVN0YXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVN0YXJ0IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIGNyZWF0ZSgpIHtcblxuICAgICAgICB0aGlzLmdhbWUuYmdNdXNpYy5wbGF5KCk7XG4gICAgICAgIHRoaXMuZ2FtZS5iZ011c2ljLmxvb3AgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuYWRkLnNwcml0ZSgwLCAwLCBcInN0YXJ0R2FtZUJnXCIpO1xuICAgICAgICB0aGlzLmdhbWUuY3JlYXRlVG9nZ2xlTXVzaWNCdG4odGhpcyk7XG5cbiAgICAgICAgdGhpcy5wbGF5QnRuID0gdGhpcy5hZGQuYnV0dG9uKHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgKiA3IC8gOCwgJ3N0YXJ0R2FtZVBsYXlCdG4nLCB0aGlzLm9uUGxheUJ0bkNsaWNrLCB0aGlzLCAxLCAwLCAyKTtcbiAgICAgICAgdGhpcy5wbGF5QnRuLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgIHRoaXMucGxheUJ0bi5vbklucHV0T3Zlci5hZGQodGhpcy5vdmVyLCB0aGlzKTtcbiAgICAgICAgdGhpcy5wbGF5QnRuLm9uSW5wdXRPdXQuYWRkKHRoaXMub3V0LCB0aGlzKTtcbiAgICB9XG5cbiAgICBvdmVyKCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpLnN0eWxlLmN1cnNvciA9ICdub25lJztcbiAgICAgICAgdGhpcy5wb2ludGVyID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuaW5wdXQueCAtIDI1LCB0aGlzLmlucHV0LnkgLSAzMiwgXCJwb2ludGVyXCIpO1xuICAgICAgICB0aGlzLmlucHV0LmFkZE1vdmVDYWxsYmFjayhmdW5jdGlvbiAocG9pbnRlciwgeCwgeSkge1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyLnggPSB4IC0gMjU7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXIueSA9IHkgLSAzMjtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgb3V0KCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpLnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICAgICAgdGhpcy5pbnB1dC5kZWxldGVNb3ZlQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5wb2ludGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBvblBsYXlCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5jbGlja1NvdW5kID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnY2xpY2snKTtcbiAgICAgICAgdGhpcy5jbGlja1NvdW5kLnBsYXkoKTtcbiAgICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbFNlbGVjdCcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICB9XG59XG4iXX0=
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var LevelFailed = (function () {
    function LevelFailed() {
        _classCallCheck(this, LevelFailed);
    }

    _createClass(LevelFailed, [{
        key: 'create',
        value: function create() {
            var BUTTON_PADDING = 20;
            var GAME_SETTINGS = this.game.levelsJSON.gameSettings;

            this.game.bgMusic.pause();
            this.levelFailedSound = this.game.add.audio('levelFailedSound');
            this.levelFailedSound.play();

            this.window = this.game.add.group();

            var windowBg = this.window.create(0, 0, "levelFailedWindowBg");
            var selectLevelBtn = this.createButton(this.window, 'windowBtn', this.onSelectLevelClick);
            var selectLevelText = this.game.add.bitmapText(0, 0, 'segoes', "Menu", 24);
            selectLevelText.x = (selectLevelBtn.width - selectLevelText.width) / 2;
            selectLevelText.y = (selectLevelBtn.height - selectLevelText.height - 6) / 2;
            selectLevelBtn.addChild(selectLevelText);

            var replayBtn = this.createButton(this.window, 'windowBtn', this.onReplayClick);
            var replayText = this.game.add.bitmapText(0, 0, 'segoes', "Replay", 24);
            replayText.x = (replayBtn.width - replayText.width) / 2;
            replayText.y = (replayBtn.height - replayText.height - 6) / 2;
            replayBtn.addChild(replayText);

            selectLevelBtn.x = GAME_SETTINGS.canvasWidth / 2 - selectLevelBtn.width - BUTTON_PADDING / 2;
            replayBtn.x = GAME_SETTINGS.canvasWidth / 2 + BUTTON_PADDING / 2;
        }
    }, {
        key: 'createButton',
        value: function createButton(parent, asset, callback) {
            var btn = this.game.make.button(0, 460, asset, callback, this, 1, 0, 2);
            parent.add(btn);
            btn.onInputOver.add(this.over, this);
            btn.onInputOut.add(this.out, this);
            return btn;
        }
    }, {
        key: 'onSelectLevelClick',
        value: function onSelectLevelClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('levelSelect');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'onReplayClick',
        value: function onReplayClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('game');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'over',
        value: function over() {
            document.querySelector("canvas").style.cursor = 'none';
            this.pointer = this.add.sprite(this.input.x - 25, this.input.y - 32, "pointer");
            this.input.addMoveCallback(function (pointer, x, y) {
                this.pointer.x = x - 25;
                this.pointer.y = y - 32;
            }, this);
        }
    }, {
        key: 'out',
        value: function out() {
            document.querySelector("canvas").style.cursor = 'default';
            this.input.deleteMoveCallback();
            this.pointer.destroy();
        }
    }]);

    return LevelFailed;
})();

exports['default'] = LevelFailed;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LevelSelect = (function (_Phaser$State) {
    _inherits(LevelSelect, _Phaser$State);

    function LevelSelect() {
        _classCallCheck(this, LevelSelect);

        _get(Object.getPrototypeOf(LevelSelect.prototype), 'constructor', this).call(this);

        this.holdicons = [];
    }

    _createClass(LevelSelect, [{
        key: 'preload',
        value: function preload() {
            this.initProgressData();
        }
    }, {
        key: 'create',
        value: function create() {
            if (!this.game.bgMusic.isPlaying) this.game.bgMusic.play();

            this.add.sprite(0, 0, "levelSelectBg");
            this.game.createToggleMusicBtn(this);
            this.game.stage.backgroundColor = 0x80a0ff;
            this.createLevelIcons(this.game.levelsJSON.levels.length);
            this.animateLevelIcons();
        }
    }, {
        key: 'initProgressData',
        value: function initProgressData() {
            if (!this.game.PLAYER_DATA) {
                // retrieve from local storage (to view in Chrome, Ctrl+Shift+J -> Resources -> Local Storage)
                var str = window.localStorage.getItem('mygame_progress');
                // error checking, localstorage might not exist yet at first time start up
                try {
                    this.game.PLAYER_DATA = JSON.parse(str);
                } catch (e) {
                    this.game.PLAYER_DATA = []; //error in the above string(in this case,yes)!
                }
                // error checking just to be sure, if localstorage contains something else then a JSON array (hackers?)
                if (Object.prototype.toString.call(this.game.PLAYER_DATA) !== '[object Array]') {
                    this.game.PLAYER_DATA = [];
                }
            }
        }
    }, {
        key: 'createLevelIcons',
        value: function createLevelIcons(levelsCount) {
            var STARS_COUNT = 3;
            var HOR_PADDING = 50;
            var VERT_PADDING = 15;
            var ITEM_WIDTH = 128;
            var ITEM_HEIGHT = 128;
            var VERTICAL_OFFSET = 160;

            var levelNumber = 0;
            var rowCount = 3;
            var columnCount = parseInt(levelsCount / rowCount);
            var horizontalOffset = (this.game.levelsJSON.gameSettings.canvasWidth - (columnCount - 1) * (ITEM_WIDTH + HOR_PADDING) - ITEM_WIDTH) / 2;

            var xPos = undefined;
            var yPos = undefined;

            for (var row = 0; row < rowCount; row++) {
                for (var column = 0; column < columnCount; column++) {
                    // next level
                    levelNumber = levelNumber + 1;

                    // check if array not yet initialised
                    if (typeof this.game.PLAYER_DATA[levelNumber - 1] !== 'number') {
                        // value is null or undefined, i.e. array not defined or too short between app upgrades with more levels
                        if (levelNumber == 1) {
                            this.game.PLAYER_DATA[levelNumber - 1] = 0; // level 1 should never be locked
                        } else {
                                this.game.PLAYER_DATA[levelNumber - 1] = -1;
                            }
                    }

                    // player progress info for this level
                    var playdata = this.game.PLAYER_DATA[levelNumber - 1];

                    var isLocked = true;
                    var stars = 0;

                    // check if level is unlocked
                    if (playdata > -1) {
                        isLocked = false; // unlocked
                        if (playdata <= STARS_COUNT) {
                            stars = playdata;
                        }
                    }

                    xPos = horizontalOffset + (HOR_PADDING + ITEM_WIDTH) * column;
                    yPos = VERTICAL_OFFSET + row * (ITEM_HEIGHT + VERT_PADDING);

                    this.holdicons[levelNumber - 1] = this.createLevelIcon(xPos, yPos, levelNumber, isLocked, stars);
                    var backicon = this.holdicons[levelNumber - 1].getAt(0);
                    backicon.levelNumber = levelNumber;
                    backicon.inputEnabled = true;
                    backicon.events.onInputDown.add(this.onSpriteDown, this);
                    backicon.events.onInputOver.add(this.overSprite, this);
                    backicon.events.onInputOut.add(this.outSprite, this);
                }
            }
        }
    }, {
        key: 'overSprite',
        value: function overSprite() {
            document.querySelector("canvas").style.cursor = 'none';
            this.pointer = this.add.sprite(this.input.x - 25, this.input.y - 32, "pointer");
            this.input.addMoveCallback(function (pointer, x, y) {
                this.pointer.x = x - 25;
                this.pointer.y = y - 32;
            }, this);
        }
    }, {
        key: 'outSprite',
        value: function outSprite() {
            document.querySelector("canvas").style.cursor = 'default';
            this.input.deleteMoveCallback();
            this.pointer.destroy();
        }
    }, {
        key: 'createLevelIcon',
        value: function createLevelIcon(xPos, yPos, levelNumber, isLocked, stars) {
            var iconGroup = this.game.add.group();
            iconGroup.x = xPos;
            iconGroup.y = yPos;

            // keep original position, for restoring after certain tweens
            iconGroup.xOrg = xPos;
            iconGroup.yOrg = yPos;

            // determine background frame
            var frame = 0;
            if (isLocked == false) {
                frame = 1;
            }
            //let icon1 = this.game.add.sprite(0, 0, 'levelselecticons', frame);
            iconGroup.create(0, 0, 'levelselecticons', frame);

            // add stars, if needed
            if (isLocked == false) {
                var txt = this.game.add.bitmapText(24, 16, 'cooperBold', '' + levelNumber, 48);
                var iconWithStars = this.game.add.sprite(0, 0, 'levelselecticons', 2 + stars);
                iconGroup.add(txt);
                iconGroup.add(iconWithStars);
            }
            return iconGroup;
        }
    }, {
        key: 'onSpriteDown',
        value: function onSpriteDown(sprite, pointer) {
            var levelNumber = sprite.levelNumber;
            var iconGroup = this.holdicons[levelNumber - 1];

            if (this.game.PLAYER_DATA[levelNumber - 1] < 0) {
                var xPos = iconGroup.xOrg;
                var tween = this.game.add.tween(iconGroup).to({ x: xPos + 6 }, 20, Phaser.Easing.Linear.None).to({ x: xPos - 5 }, 20, Phaser.Easing.Linear.None).to({ x: xPos + 4 }, 20, Phaser.Easing.Linear.None).to({ x: xPos - 3 }, 20, Phaser.Easing.Linear.None).to({ x: xPos + 2 }, 20, Phaser.Easing.Linear.None).to({ x: xPos }, 20, Phaser.Easing.Linear.None).start();
            } else {
                var tween = this.game.add.tween(iconGroup.scale).to({ x: 0.9, y: 0.9 }, 100, Phaser.Easing.Linear.None).to({ x: 1.0, y: 1.0 }, 100, Phaser.Easing.Linear.None).start();
                tween.onComplete.add(function () {
                    this.onLevelSelected(levelNumber - 1);
                }, this);

                this.clickSound = this.game.add.audio('click');
                this.clickSound.play();
                document.querySelector("canvas").style.cursor = 'default';
            }
        }

        // slide all icons into screen
    }, {
        key: 'animateLevelIcons',
        value: function animateLevelIcons() {
            var START_POSITION = 600;
            for (var i = 0, _length = this.holdicons.length; i < _length; i++) {
                // get variables
                var iconGroup = this.holdicons[i];
                iconGroup.y = iconGroup.y + START_POSITION;
                var y = iconGroup.y;

                // tween animation
                this.game.add.tween(iconGroup).to({ y: y - START_POSITION }, 500, Phaser.Easing.Back.Out, true, i * 40);
            }
        }
    }, {
        key: 'onLevelSelected',
        value: function onLevelSelected(levelNumber) {
            this.game.state.states['game']._levelNumber = levelNumber;
            this.state.start('game');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }]);

    return LevelSelect;
})(Phaser.State);

exports['default'] = LevelSelect;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var LevelUp = (function () {
    function LevelUp() {
        _classCallCheck(this, LevelUp);
    }

    _createClass(LevelUp, [{
        key: 'create',
        value: function create() {
            var GAME_SETTINGS = this.game.levelsJSON.gameSettings;
            var BUTTON_PADDING = 20;

            if (!this.game.bgMusic.mute) {
                this.game.bgMusic.pause();
            }
            this.winSound = this.game.add.audio('winSound');
            this.winSound.play();

            this.window = this.game.add.group();
            var windowBg = this.window.create(0, 0, "levelUpWindowBg");
            var selectLevelBtn = this.createButton(this.window, 'windowBtn', this.onSelectLevelClick);
            var selectLevelText = this.game.add.bitmapText(0, 0, 'segoes', "Menu", 24);
            selectLevelText.x = (selectLevelBtn.width - selectLevelText.width) / 2;
            selectLevelText.y = (selectLevelBtn.height - selectLevelText.height - 6) / 2;
            selectLevelBtn.addChild(selectLevelText);

            var replayBtn = this.createButton(this.window, 'windowBtn', this.onReplayClick);
            var replayText = this.game.add.bitmapText(0, 0, 'segoes', "Replay", 24);
            replayText.x = (replayBtn.width - replayText.width) / 2;
            replayText.y = (replayBtn.height - replayText.height - 6) / 2;
            replayBtn.addChild(replayText);

            var nextLevelBtn = this.createButton(this.window, 'windowBtn', this.onNextLevelClick);
            var nextText = this.game.add.bitmapText(0, 0, 'segoes', "Next", 24);
            nextText.x = (nextLevelBtn.width - nextText.width) / 2;
            nextText.y = (nextLevelBtn.height - nextText.height - 6) / 2;
            nextLevelBtn.addChild(nextText);

            selectLevelBtn.x = (GAME_SETTINGS.canvasWidth - selectLevelBtn.width * 3 - BUTTON_PADDING * 2) / 2;
            replayBtn.x = (GAME_SETTINGS.canvasWidth - replayBtn.width) / 2;
            nextLevelBtn.x = GAME_SETTINGS.canvasWidth / 2 + replayBtn.width / 2 + BUTTON_PADDING;
        }
    }, {
        key: 'createButton',
        value: function createButton(parent, asset, callback) {
            var btn = this.game.make.button(0, 460, asset, callback, this, 1, 0, 2);
            parent.add(btn);
            btn.onInputOver.add(this.over, this);
            btn.onInputOut.add(this.out, this);
            return btn;
        }
    }, {
        key: 'onSelectLevelClick',
        value: function onSelectLevelClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('levelSelect');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'onNextLevelClick',
        value: function onNextLevelClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.game.state.states['game']._levelNumber++;
            this.state.start('game');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'onReplayClick',
        value: function onReplayClick() {
            var clickSound = this.game.add.audio('click');
            clickSound.play();
            this.state.start('game');
            document.querySelector("canvas").style.cursor = 'default';
        }
    }, {
        key: 'over',
        value: function over() {
            document.querySelector("canvas").style.cursor = 'none';
            this.pointer = this.add.sprite(this.input.x - 25, this.input.y - 32, "pointer");
            this.input.addMoveCallback(function (pointer, x, y) {
                this.pointer.x = x - 25;
                this.pointer.y = y - 32;
            }, this);
        }
    }, {
        key: 'out',
        value: function out() {
            document.querySelector("canvas").style.cursor = 'default';
            this.input.deleteMoveCallback();
            this.pointer.destroy();
        }
    }]);

    return LevelUp;
})();

exports['default'] = LevelUp;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
    function Preload() {
        _classCallCheck(this, Preload);

        this.loaderSprite = null;
        this.ready = false;
    }

    _createClass(Preload, [{
        key: 'preload',
        value: function preload() {
            this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
            this.loaderSprite = this.add.sprite(this.game.width / 2 - 100, this.game.height / 2 - 102, 'loader');
            this.loaderSprite.animations.add('loaderPlay');
            this.loaderSprite.animations.play('loaderPlay', 30, true);
            this.load.setPreloadSprite(this.loaderSprite);
            this.load.image('startGameBg', 'assets/UI/startGameBg.jpg');
            this.load.image('pointer', 'assets/UI/pointer.png');
            this.load.image('scoreBg', 'assets/UI/scoreBg.png');
            this.load.spritesheet('menuBtn', 'assets/UI/menuBtn.png', 82, 76);
            this.load.spritesheet('startGamePlayBtn', 'assets/UI/spritePlayBtn.png', 282, 122);
            this.load.spritesheet('windowBtn', 'assets/UI/statesBtn.png', 203, 88);
            this.load.spritesheet('musicBtn', 'assets/UI/musicBtn.png', 83, 84);

            this.load.spritesheet('levelselecticons', 'assets/UI/levelSelectIcon.png', 96, 96);
            this.load.image('levelSelectBg', 'assets/UI/selectLevelBg.png');
            this.load.bitmapFont('cooperBold', 'assets/cooperBold.png', 'assets/cooperBold.fnt'); // created with http://kvazars.com/littera/
            this.load.bitmapFont('segoes', 'assets/segoes.png', 'assets/segoes.fnt'); // created with http://kvazars.com/littera/ //
            this.load.image('milkBottle', 'assets/images/bottle.png');

            this.load.image('roomBg', 'assets/images/roomBg.png');
            this.load.image('secondRoom', 'assets/images/secondRoom.png');
            this.load.image('rack', 'assets/images/rack.png');

            this.load.image('slingshotHandle', 'assets/images/slingshotHandle.png');
            this.load.image('slingshotHandleRightPart', 'assets/images/slingshotHandleRightPart.png');
            this.load.image('ball', 'assets/images/ball.png');

            this.load.image('levelUpWindowBg', 'assets/UI/levelUp.jpg');
            this.load.image('levelFailedWindowBg', 'assets/UI/levelFailed.jpg');
            this.load.image('finishedWindowBg', 'assets/UI/finishedGame.jpg');

            this.load.image('greenBox', 'assets/images/greenBox.png');
            this.load.image('purpleBox', 'assets/images/purpleBox.png');
            this.load.image('yellowBox', 'assets/images/yellowBox.png');

            this.load.image('rope', 'assets/images/rope.png');
            this.load.image('toy', 'assets/images/toy.png');
            this.load.image('duck', 'assets/images/duck.png');
            this.load.image('car', 'assets/images/car.png');
            this.load.image('elephant', 'assets/images/elephant.png');

            this.load.physics('physics', 'assets/physics.json');

            this.game.levelsJSON = this.game.cache.getJSON('levels');

            this.load.audio('scoreSound', 'assets/sounds/score.mp3');
            this.load.audio('slingshotSound', 'assets/sounds/slingshot.mp3');
            this.load.audio('click', 'assets/sounds/click.wav');
            this.load.audio('pullSound', 'assets/sounds/pull.mp3');
            this.load.audio('boxSound', 'assets/sounds/ballkick.mp3');
            this.load.audio('winSound', 'assets/sounds/levelWin.wav');
            this.load.audio('levelFailedSound', 'assets/sounds/levelLost.wav');
            this.load.audio('bottleSound', 'assets/sounds/bottleDestroy.wav');
            this.load.audio('finished', 'assets/sounds/level_win_1.wav');
            this.load.audio('bgMusic', 'assets/sounds/background-music.mp3');
        }
    }, {
        key: 'create',
        value: function create() {
            this.game.bgMusic = this.game.add.audio('bgMusic');
            this.game.bgMusic.loop = true;
        }
    }, {
        key: 'update',
        value: function update() {
            if (this.cache.isSoundDecoded('scoreSound') && this.cache.isSoundDecoded('slingshotSound') && this.cache.isSoundDecoded('click') && this.cache.isSoundDecoded('pullSound') && this.cache.isSoundDecoded('boxSound') && this.ready == true) {
                this.state.start('gameStart');
            }
        }
    }, {
        key: 'onLoadComplete',
        value: function onLoadComplete() {
            this.ready = true;
        }
    }]);

    return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLE9BQU87QUFFYixhQUZNLE9BQU8sR0FFVjs4QkFGRyxPQUFPOztBQUdwQixZQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixZQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztLQUN0Qjs7aUJBTGdCLE9BQU87O2VBT2pCLG1CQUFHO0FBQ04sZ0JBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVELGdCQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNyRyxnQkFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQy9DLGdCQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0FBQzVELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUNwRCxnQkFBSSxDQUFDLElBQUks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QU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDakM7OztlQUVLLGtCQUFHO0FBQ0wsZ0JBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFDNUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7QUFDdkcsb0JBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2pDO1NBQ0o7OztlQUVhLDBCQUFHO0FBQ2IsZ0JBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ3JCOzs7V0EvRWdCLE9BQU87OztxQkFBUCxPQUFPIiwiZmlsZSI6IkQ6L05hc3R5YS9Sb2xsaW5nU2NvcGVTY29vbC9HaXJscy1nYW1lLXRlYW0vR2lybHMtZ2FtZS10ZWFtL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubG9hZGVyU3ByaXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xuICAgICAgICB0aGlzLmxvYWRlclNwcml0ZSA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGggLyAyIC0gMTAwLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiAtIDEwMiwgJ2xvYWRlcicpO1xuICAgICAgICB0aGlzLmxvYWRlclNwcml0ZS5hbmltYXRpb25zLmFkZCgnbG9hZGVyUGxheScpO1xuICAgICAgICB0aGlzLmxvYWRlclNwcml0ZS5hbmltYXRpb25zLnBsYXkoJ2xvYWRlclBsYXknLCAzMCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubG9hZC5zZXRQcmVsb2FkU3ByaXRlKHRoaXMubG9hZGVyU3ByaXRlKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdzdGFydEdhbWVCZycsICdhc3NldHMvVUkvc3RhcnRHYW1lQmcuanBnJyk7XG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgncG9pbnRlcicsICdhc3NldHMvVUkvcG9pbnRlci5wbmcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdzY29yZUJnJywgJ2Fzc2V0cy9VSS9zY29yZUJnLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ21lbnVCdG4nLCAnYXNzZXRzL1VJL21lbnVCdG4ucG5nJywgODIsIDc2KTtcbiAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdzdGFydEdhbWVQbGF5QnRuJywgJ2Fzc2V0cy9VSS9zcHJpdGVQbGF5QnRuLnBuZycsIDI4MiwgMTIyKTtcbiAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCd3aW5kb3dCdG4nLCAnYXNzZXRzL1VJL3N0YXRlc0J0bi5wbmcnLCAyMDMsIDg4KTtcbiAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdtdXNpY0J0bicsICdhc3NldHMvVUkvbXVzaWNCdG4ucG5nJywgODMsIDg0KTtcblxuICAgICAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2xldmVsc2VsZWN0aWNvbnMnLCAnYXNzZXRzL1VJL2xldmVsU2VsZWN0SWNvbi5wbmcnLCA5NiwgOTYpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xldmVsU2VsZWN0QmcnLCAnYXNzZXRzL1VJL3NlbGVjdExldmVsQmcucG5nJyk7XG4gICAgICAgIHRoaXMubG9hZC5iaXRtYXBGb250KCdjb29wZXJCb2xkJywgJ2Fzc2V0cy9jb29wZXJCb2xkLnBuZycsICdhc3NldHMvY29vcGVyQm9sZC5mbnQnKTsgLy8gY3JlYXRlZCB3aXRoIGh0dHA6Ly9rdmF6YXJzLmNvbS9saXR0ZXJhL1xuICAgICAgICB0aGlzLmxvYWQuYml0bWFwRm9udCgnc2Vnb2VzJywgJ2Fzc2V0cy9zZWdvZXMucG5nJywgJ2Fzc2V0cy9zZWdvZXMuZm50Jyk7IC8vIGNyZWF0ZWQgd2l0aCBodHRwOi8va3ZhemFycy5jb20vbGl0dGVyYS8gLy9cbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdtaWxrQm90dGxlJywgJ2Fzc2V0cy9pbWFnZXMvYm90dGxlLnBuZycpO1xuXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgncm9vbUJnJywgJ2Fzc2V0cy9pbWFnZXMvcm9vbUJnLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3NlY29uZFJvb20nLCAnYXNzZXRzL2ltYWdlcy9zZWNvbmRSb29tLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3JhY2snLCAnYXNzZXRzL2ltYWdlcy9yYWNrLnBuZycpO1xuXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgnc2xpbmdzaG90SGFuZGxlJywgJ2Fzc2V0cy9pbWFnZXMvc2xpbmdzaG90SGFuZGxlLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3NsaW5nc2hvdEhhbmRsZVJpZ2h0UGFydCcsICdhc3NldHMvaW1hZ2VzL3NsaW5nc2hvdEhhbmRsZVJpZ2h0UGFydC5wbmcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdiYWxsJywgJ2Fzc2V0cy9pbWFnZXMvYmFsbC5wbmcnKTtcblxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xldmVsVXBXaW5kb3dCZycsICdhc3NldHMvVUkvbGV2ZWxVcC5qcGcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdsZXZlbEZhaWxlZFdpbmRvd0JnJywgJ2Fzc2V0cy9VSS9sZXZlbEZhaWxlZC5qcGcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdmaW5pc2hlZFdpbmRvd0JnJywgJ2Fzc2V0cy9VSS9maW5pc2hlZEdhbWUuanBnJyk7XG5cbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdncmVlbkJveCcsICdhc3NldHMvaW1hZ2VzL2dyZWVuQm94LnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3B1cnBsZUJveCcsICdhc3NldHMvaW1hZ2VzL3B1cnBsZUJveC5wbmcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCd5ZWxsb3dCb3gnLCAnYXNzZXRzL2ltYWdlcy95ZWxsb3dCb3gucG5nJyk7XG5cbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdyb3BlJywgJ2Fzc2V0cy9pbWFnZXMvcm9wZS5wbmcnKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCd0b3knLCAnYXNzZXRzL2ltYWdlcy90b3kucG5nJyk7XG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgnZHVjaycsICdhc3NldHMvaW1hZ2VzL2R1Y2sucG5nJyk7XG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgnY2FyJywgJ2Fzc2V0cy9pbWFnZXMvY2FyLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2VsZXBoYW50JywgJ2Fzc2V0cy9pbWFnZXMvZWxlcGhhbnQucG5nJyk7XG5cbiAgICAgICAgdGhpcy5sb2FkLnBoeXNpY3MoJ3BoeXNpY3MnLCAnYXNzZXRzL3BoeXNpY3MuanNvbicpO1xuXG4gICAgICAgIHRoaXMuZ2FtZS5sZXZlbHNKU09OID0gdGhpcy5nYW1lLmNhY2hlLmdldEpTT04oJ2xldmVscycpO1xuXG4gICAgICAgIHRoaXMubG9hZC5hdWRpbygnc2NvcmVTb3VuZCcsICdhc3NldHMvc291bmRzL3Njb3JlLm1wMycpO1xuICAgICAgICB0aGlzLmxvYWQuYXVkaW8oJ3NsaW5nc2hvdFNvdW5kJywgJ2Fzc2V0cy9zb3VuZHMvc2xpbmdzaG90Lm1wMycpO1xuICAgICAgICB0aGlzLmxvYWQuYXVkaW8oJ2NsaWNrJywgJ2Fzc2V0cy9zb3VuZHMvY2xpY2sud2F2Jyk7XG4gICAgICAgIHRoaXMubG9hZC5hdWRpbygncHVsbFNvdW5kJywgJ2Fzc2V0cy9zb3VuZHMvcHVsbC5tcDMnKTtcbiAgICAgICAgdGhpcy5sb2FkLmF1ZGlvKCdib3hTb3VuZCcsICdhc3NldHMvc291bmRzL2JhbGxraWNrLm1wMycpO1xuICAgICAgICB0aGlzLmxvYWQuYXVkaW8oJ3dpblNvdW5kJywgJ2Fzc2V0cy9zb3VuZHMvbGV2ZWxXaW4ud2F2Jyk7XG4gICAgICAgIHRoaXMubG9hZC5hdWRpbygnbGV2ZWxGYWlsZWRTb3VuZCcsICdhc3NldHMvc291bmRzL2xldmVsTG9zdC53YXYnKTtcbiAgICAgICAgdGhpcy5sb2FkLmF1ZGlvKCdib3R0bGVTb3VuZCcsICdhc3NldHMvc291bmRzL2JvdHRsZURlc3Ryb3kud2F2Jyk7XG4gICAgICAgIHRoaXMubG9hZC5hdWRpbygnZmluaXNoZWQnLCAnYXNzZXRzL3NvdW5kcy9sZXZlbF93aW5fMS53YXYnKTtcbiAgICAgICAgdGhpcy5sb2FkLmF1ZGlvKCdiZ011c2ljJywgJ2Fzc2V0cy9zb3VuZHMvYmFja2dyb3VuZC1tdXNpYy5tcDMnKTtcbiAgICB9XG5cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5iZ011c2ljID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnYmdNdXNpYycpO1xuICAgICAgICB0aGlzLmdhbWUuYmdNdXNpYy5sb29wID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmlzU291bmREZWNvZGVkKCdzY29yZVNvdW5kJykgJiYgdGhpcy5jYWNoZS5pc1NvdW5kRGVjb2RlZCgnc2xpbmdzaG90U291bmQnKSAmJiB0aGlzLmNhY2hlLmlzU291bmREZWNvZGVkKCdjbGljaycpICYmXG4gICAgICAgICAgICB0aGlzLmNhY2hlLmlzU291bmREZWNvZGVkKCdwdWxsU291bmQnKSAmJiB0aGlzLmNhY2hlLmlzU291bmREZWNvZGVkKCdib3hTb3VuZCcpICYmIHRoaXMucmVhZHkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zdGFydCgnZ2FtZVN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkxvYWRDb21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgfVxufVxuIl19
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
